name: 🐳 Build - Push - Release

on:
  push:
    branches:
      - main

concurrency:
  group: ${{ github.workflow }}
  cancel-in-progress: false

jobs:
  # Setup and version detection job
  setup:
    runs-on: ubuntu-latest
    permissions:
      contents: write
    outputs:
      version: ${{ steps.get_version.outputs.version }}
      should_build: ${{ steps.check_commit.outputs.should_build }}
    steps:
      - name: Checkout code 🌿
        uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683
        with:
          fetch-depth: 0

      - name: Set up Node.js 🟢
        uses: actions/setup-node@49933ea5288caeca8642d1e84afbd3f7d6820020
        with:
          node-version: 20

      - name: Install semantic-release and plugins 📦
        run: |
          npm install -g semantic-release @semantic-release/changelog @semantic-release/git @semantic-release/github conventional-changelog-conventionalcommits semantic-release-export-data

      - name: Get next version from semantic-release 🏷️
        id: get_version
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          npx semantic-release --dry-run || true
          VERSION=$(npx semantic-release --dry-run 2>&1 | grep -oP 'Skip v\K[0-9]+\.[0-9]+\.[0-9]+')
          echo "Detected version: $VERSION"
          if [ -z "$VERSION" ]; then
            exit 1
          fi
          echo "version=$VERSION" >> $GITHUB_OUTPUT

      - name: Abort if not latest commit on main ❌
        id: check_commit
        run: |
          REMOTE_SHA=$(git ls-remote origin refs/heads/main | cut -f1)
          echo "Current SHA: $GITHUB_SHA"
          echo "Remote SHA:  $REMOTE_SHA"
          if [ "$GITHUB_SHA" != "$REMOTE_SHA" ]; then
            echo "This workflow is not running on the latest commit of main. Exiting early."
            echo "should_build=false" >> $GITHUB_OUTPUT
          else
            echo "should_build=true" >> $GITHUB_OUTPUT
          fi

  # Build AMD64 images on standard Ubuntu runner
  build-amd64:
    needs: setup
    if: needs.setup.outputs.should_build == 'true'
    runs-on: ubuntu-latest
    permissions:
      packages: write
    strategy:
      matrix:
        component: [server, client]
    steps:
      - name: Checkout code 🌿
        uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683

      - name: Set up Docker Buildx 🛠️
        uses: docker/setup-buildx-action@e468171a9de216ec08956ac3ada2f0791b6bd435

      - name: Log in to GHCR 🔑
        uses: docker/login-action@74a5d142397b4f367a81961eba4e8cd7edddf772
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Build and push AMD64 image 🐳
        run: |
          docker buildx build --platform linux/amd64 \
            -t ghcr.io/${{ github.repository }}/${{ matrix.component }}:${{ needs.setup.outputs.version }}-amd64 \
            -f cmd/${{ matrix.component }}/Dockerfile \
            --push \
            --cache-from=type=gha,scope=${{ matrix.component }}-amd64 \
            --cache-to=type=gha,mode=max,scope=${{ matrix.component }}-amd64 .

  # Build ARM64 images on ARM64 runner for optimal performance
  build-arm64:
    needs: setup
    if: needs.setup.outputs.should_build == 'true'
    runs-on: ubuntu-24.04-arm
    permissions:
      packages: write
    strategy:
      matrix:
        component: [server, client]
    steps:
      - name: Checkout code 🌿
        uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683

      - name: Set up Docker Buildx 🛠️
        uses: docker/setup-buildx-action@e468171a9de216ec08956ac3ada2f0791b6bd435

      - name: Log in to GHCR 🔑
        uses: docker/login-action@74a5d142397b4f367a81961eba4e8cd7edddf772
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Build and push ARM64 image 🐳
        run: |
          docker buildx build --platform linux/arm64 \
            -t ghcr.io/${{ github.repository }}/${{ matrix.component }}:${{ needs.setup.outputs.version }}-arm64 \
            -f cmd/${{ matrix.component }}/Dockerfile \
            --push \
            --cache-from=type=gha,scope=${{ matrix.component }}-arm64 \
            --cache-to=type=gha,mode=max,scope=${{ matrix.component }}-arm64 .

  # Create and push multi-architecture manifests
  create-manifests:
    needs: [setup, build-amd64, build-arm64]
    if: needs.setup.outputs.should_build == 'true'
    runs-on: ubuntu-latest
    permissions:
      packages: write
    strategy:
      matrix:
        component: [server, client]
    steps:
      - name: Log in to GHCR 🔑
        uses: docker/login-action@74a5d142397b4f367a81961eba4e8cd7edddf772
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Create and push multi-arch manifest 🏗️
        run: |
          # Create manifest for versioned tag
          docker manifest create ghcr.io/${{ github.repository }}/${{ matrix.component }}:${{ needs.setup.outputs.version }} \
            ghcr.io/${{ github.repository }}/${{ matrix.component }}:${{ needs.setup.outputs.version }}-amd64 \
            ghcr.io/${{ github.repository }}/${{ matrix.component }}:${{ needs.setup.outputs.version }}-arm64

          # Create manifest for latest tag
          docker manifest create ghcr.io/${{ github.repository }}/${{ matrix.component }}:latest \
            ghcr.io/${{ github.repository }}/${{ matrix.component }}:${{ needs.setup.outputs.version }}-amd64 \
            ghcr.io/${{ github.repository }}/${{ matrix.component }}:${{ needs.setup.outputs.version }}-arm64

          # Push manifests
          docker manifest push ghcr.io/${{ github.repository }}/${{ matrix.component }}:${{ needs.setup.outputs.version }}
          docker manifest push ghcr.io/${{ github.repository }}/${{ matrix.component }}:latest

  # Release job
  release:
    needs: [setup, create-manifests]
    if: needs.setup.outputs.should_build == 'true'
    runs-on: ubuntu-latest
    permissions:
      contents: write
    steps:
      - name: Checkout code 🌿
        uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683
        with:
          fetch-depth: 0

      - name: Set up Node.js 🟢
        uses: actions/setup-node@49933ea5288caeca8642d1e84afbd3f7d6820020
        with:
          node-version: 20

      - name: Install semantic-release and plugins 📦
        run: |
          npm install -g semantic-release @semantic-release/changelog @semantic-release/git @semantic-release/github conventional-changelog-conventionalcommits semantic-release-export-data

      - name: Run semantic-release 🚀
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          semantic-release
